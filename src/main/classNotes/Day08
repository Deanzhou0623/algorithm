Date: 2022 September 31th
Author: Dean Zhou
topic: 平衡树/B-树/B+树


一. 平衡树:任意子结点的高度都小于等于1
    a)  2-3查找树
        1. 定义：2-3查找树结点可以分为两类
                2-结点：含有一个键和两条链，左链接指向2-3结点的键都小于该结点，右链接指向的2-3结点的键都大于该结点

                3-结点：含有两个键和三条链，左链接指向的2-3树中的键都小于该结点，中间链接指向的2-3树中的键都位于
                       该结点的两个键之间，右链接指向的2-3树中的键都大于该结点
                       A,C 都小于E  H在E,J之间  L大于J

                                           (M)
                                        /       \
                            3-结点 -->(E,J)       (R) <-- 2-结点
                                   /  ｜  \     /    \
                               (A,C) (H) (L)  (P)   (S,X)
                               /   \  <--空链接


        2. 查找：
             二叉树的查找算法能够直接应用到2-3树上面

             图示：查找H

             step1：H小于M，继续在左子树中查找

                                          【M】
                                        /       \
                                     (E,J)       (R)
                                   /  ｜  \     /    \
                               (A,C) (H) (L)  (P)   (S,X)
                               /   \ <-代表空链接，不能走了

             step2：H大于E，小于J，继续在中子树中查找

                                           (M)
                                        /       \
                                    【E,J】       (R)
                                   /  ｜  \     /    \
                               (A,C) (H) (L)  (P)   (S,X)
                               /   \

             step3：查找命中
                                           (M)
                                        /       \
                                     (E,J)       (R)
                                   /  ｜  \     /    \
                               (A,C) 【H】 (L) (P)   (S,X)
                               /   \

        3. 2-3树插入：
            2-3树都插入与二叉查找树插入元素一样

            图示：插入K

            情况1：向2-结点中插入 新键

                                           (M)
                                        /       \
                                     (E,J)       (R)
                                   /  ｜  \     /    \
                               (A,C) (H) (L)  (P)   (S,X)
                               /   \     /  \
                                   未命中查找结束于L的左链接

                                           (M)
                                        /       \
                                    （E,J)        (R)
                                   /  ｜  \      /    \
                               (A,C) (H)【K,L】 (P)   (S,X)
                               /   \
                                将2-结点替换为一个新的含有k的3-结点

            情况2：向一个含有3-结点的树中插入新键

                    插入S：
                                     (A,E)  <---没有空间储存S
                                    /  ｜  \

                                    (A,E,S)  <---创建一个4-结点，S大于A和E，s在最右边
                                   /  ｜ ｜ \

                                       (E)
                                      /    \
                                    (A)    (S) <---分解4-结点：将中间键提升，生成2-结点

            情况3：向父结点为2-结点的3-结点中插入新键

            插入Z
            step1:
                                           (M)
                                        /       \
                                    （E,J)        (R)
                                   /  ｜  \      /    \
                               (A,C) (H) (L)  (P)   (S,X) <--对于z的查找结束于这里，比x大

            step2:
                                            (M)
                                         /       \
                                     （E,J)        (R)
                                    /  ｜  \      /    \
                                (A,C) (H) (L)  (P)   (S,X,Z) <--将3-结点替换为包含Z的4-结点
                                                      / | | \

            step3:
                                            (M)
                                         /       \
                                     （E,J)       (R,X) <--将2-结点替换为含有中间键3-结点
                                    /  ｜  \      /  |  \
                                (A,C) (H) (L)   (P) (S) (Z)<--将4-结点分解为2个2-结点，将中键移到父结点中

            情况4：向一个父结点为3-结点的3-结点中插入新键

            插入D
            step1:
                                           (M)
                                        /       \
                                    （E,J)        (R)
                                   /  ｜  \      /    \
               D的查找结束到这-> (A,C) (H) (L)   (P)   (S,X)

            step2：
                                           (M)
                                        /       \
                                    （E,J)        (R)
                D加入3-结点          /  ｜  \      /    \
                变为临时4-结点->(A,C,D) (H) (L)  (P)   (S,X)
                              / | | \
            step3：
                                           (M)
                                        /       \
                                   (C,E,J)        (R)
                               /  ｜   ｜  \      /    \
                             (A) (D) (H)  (L)   (P)   (S,X)
                             / \ / \ / \  /  \  / \  /  |  \
                             ｜   ｜
                           将结点4-分解为两个2-结点
                           将中间键移到父结点
            step4：
                                          (E,M)  <-- 将E加入2-结点，变为3-结点
              4-结点分解为2个            /    ｜    \
         2-结点，将中键移到父结点 ->   (C)     (J)     (R)
                                /  ｜   /     |    /    \
                              (A) (D) (H)   (L)  (P)     (S,X)
                              / \ / \ / \  /  \  / \    /  |  \

            情况5：分解跟结点
                  当插入结点到根结点的路径上全部是3-结点的时候，最终我们的根结点会临时编程
                  一个4-结点，此时，就需要将根结点拆分为2个2-结点，树的高度加1

                    插入D
                    step1：
                                          （E,J)
                                         /  ｜  \
                   D的查找结束到这->    (A,C) (H) (L)

                    step2：
                                          （E,J)
                                         /  ｜  \
                   D加入3-结点变为-> (A,C,D) (H) (L)
                   临时4-结点         / | \ / \  / \

                    step3：
                                        (C,E,J)   <- 将c加入3-结点，变为临时4-结点
                                     /   /  ｜  \
                                    (A) (D) (H) (L)
                                    / \ / \ / \ / \

                    step4：
                                           (E)
                                          /   \
                                        (C)    (J)     <- 4-结点分解为3个2-结点 ，树高+1
                                      /    \   /   \
                                    (A)   (D) (H)  (L)
                                    / \   / \ / \   / \


        4.2-3树的性质：
            一个完全平衡的2-3树具有以下特质：
            1. 任意空链接到根结点的路径长度都是相等的
            2. 4-结点变换为3-结点时，树的高度不会发生变化，只有当根结点是临时4-结点的时候，分解根结点+1
            3. 2-3树与普通普通二叉树查找树最大的区别在于，普通二叉查找树是自顶向下生长，而2-3树是自底向上

        5. 2-3树的实现：


    b) 红黑树

    c) 

二. B-树
    a)
    b)
    c)


三. B+树
    a)
    b)
    c)